name: Migrate and Deploy Backend

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  migrate-and-deploy:
    runs-on: ubuntu-latest
    env:
      # These should be configured as repository secrets
      NEON_JDBC_URL: ${{ secrets.NEON_JDBC_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Flyway migrations (Docker)
        # Uses the Flyway Docker image to run migrations from the repo against Neon
        run: |
          echo "Running Flyway migrations against Neon"
          docker run --rm -v ${{ github.workspace }}/backend/src/main/resources/db/migration:/flyway/sql \
            flyway/flyway \
            -url="${{ env.NEON_JDBC_URL }}" \
            -user="${{ env.SPRING_DATASOURCE_USERNAME }}" -password="${{ env.SPRING_DATASOURCE_PASSWORD }}" \
            -locations=filesystem:/flyway/sql migrate

      - name: Debug backend workspace contents
        run: |
          echo "Listing contents of $GITHUB_WORKSPACE and $GITHUB_WORKSPACE/backend"
          ls -la "$GITHUB_WORKSPACE" || true
          echo "-- backend dir --"
          ls -la "$GITHUB_WORKSPACE/backend" || true

      - name: Make mvnw executable
        run: |
          echo "Making mvnw executable at $GITHUB_WORKSPACE/backend/mvnw"
          chmod +x "$GITHUB_WORKSPACE/backend/mvnw"

      - name: Build backend JAR
        working-directory: ./backend
        run: |
          "$GITHUB_WORKSPACE/backend/mvnw" -DskipTests package

      - name: Build & push Docker image
        run: |
          # Ensure repository owner is lowercased (GHCR requires lowercase repository names)
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${OWNER_LOWER}/stockease:${{ github.sha }}
          echo "Building Docker image: $IMAGE"
          # Build using the backend Dockerfile (use absolute workspace path to avoid relative path issues)
          docker build -f "$GITHUB_WORKSPACE/backend/Dockerfile" -t "$IMAGE" "$GITHUB_WORKSPACE/backend"
          echo "Logging in to GHCR"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          echo "Pushing image to GHCR"
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Install Koyeb CLI
        run: |
          curl -fsSL https://cli.koyeb.com/install.sh | sudo bash

      - name: Login to Koyeb
        env:
          KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
        run: |
          koyeb login --api-key "${KOYEB_API_KEY}"

      - name: Inject image into Koyeb manifest and deploy
        run: |
          # The workflow built and pushed an image into GHCR and set IMAGE in the environment
          echo "Preparing deployment manifest with image: $IMAGE"
          # Use mikefarah/yq (docker image) to set the image field in-place
          docker run --rm -v "$GITHUB_WORKSPACE":"$GITHUB_WORKSPACE" -w "$GITHUB_WORKSPACE" mikefarah/yq yq eval '.services[0].image = strenv(IMAGE)' -i backend/koyeb.yaml
          cat backend/koyeb.yaml
          koyeb deploy -f ./backend/koyeb.yaml
