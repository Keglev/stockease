name: Deploy and Migrate Backend to Koyeb (Git Source)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

env:
  # Flip to 'true' if you want CI to run tests before redeploy.
  RUN_TESTS: 'false'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect backend directory and Skip Flyway since will be done by Koyeb server
        run: |
          if [ -f "$GITHUB_WORKSPACE/mvnw" ] && [ -f "$GITHUB_WORKSPACE/pom.xml" ]; then
            echo "BACKEND_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          elif [ -f "$GITHUB_WORKSPACE/backend/mvnw" ] && [ -f "$GITHUB_WORKSPACE/backend/pom.xml" ]; then
            echo "BACKEND_DIR=$GITHUB_WORKSPACE/backend" >> $GITHUB_ENV
          else
            echo "❌ Could not find mvnw/pom.xml at repo root or /backend" >&2
            exit 1
          fi
          echo "Detected BACKEND_DIR=$BACKEND_DIR"

      - name: Ensure Dockerfile exists near backend
        run: |
          if [ -f "$BACKEND_DIR/Dockerfile" ]; then
            echo "Found Dockerfile at $BACKEND_DIR/Dockerfile"
          else
            echo "❌ Dockerfile not found at $BACKEND_DIR/Dockerfile" >&2
            echo "If your Dockerfile lives elsewhere, either move it next to mvnw/pom.xml"
            echo "or update your Koyeb service (Git source) to point to the correct path."
            exit 1
          fi

      - name: Set up JDK 17 with Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Make mvnw executable
        run: chmod +x "$BACKEND_DIR/mvnw"

      # Optional: run tests. By default this step is skipped (RUN_TESTS='false').
      - name: Run backend tests
        if: env.RUN_TESTS == 'true'
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          ./mvnw -B -ntp test

      # Lightweight build to catch obvious compile errors before we ask Koyeb to build
      # (Koyeb will still do its own Docker build on redeploy.)
      - name: Verify build compiles (skip tests)
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          ./mvnw -B -ntp -DskipTests package

      - name: Trigger Koyeb redeploy (Git source)
        env:
          KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
          KOYEB_SERVICE_ID: ${{ secrets.KOYEB_SERVICE_ID }}
        run: |
          echo "Triggering redeploy on service $KOYEB_SERVICE_ID…"
          RESP_CODE=$(curl -s -w "\n%{http_code}" -o /tmp/resp.json \
            -X POST "https://app.koyeb.com/v1/services/$KOYEB_SERVICE_ID/redeploy" \
            -H "Authorization: Bearer $KOYEB_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{}')
          CODE=$(echo "$RESP_CODE" | tail -1)
          echo "HTTP: $CODE"
          echo "Response:"
          cat /tmp/resp.json || true
          if [ "$CODE" != "200" ] && [ "$CODE" != "201" ] && [ "$CODE" != "202" ]; then
            echo "❌ Redeploy failed"
            exit 1
          fi

      # Optional: wait for service to become healthy (polls service status)
      - name: Wait for Koyeb service HEALTHY/READY (up to ~10 min)
        env:
          KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
          KOYEB_SERVICE_ID: ${{ secrets.KOYEB_SERVICE_ID }}
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          ATTEMPTS=60
          SLEEP=10
          for i in $(seq 1 $ATTEMPTS); do
            STATUS_JSON=$(curl -s -H "Authorization: Bearer $KOYEB_API_KEY" \
              "https://app.koyeb.com/v1/services/$KOYEB_SERVICE_ID")
            STATUS=$(echo "$STATUS_JSON" | jq -r '.service?.status // "UNKNOWN"')
            echo "[$i/$ATTEMPTS] Service status: $STATUS"
            if [ "$STATUS" = "HEALTHY" ] || [ "$STATUS" = "READY" ]; then
              echo "✅ Service is $STATUS"
              exit 0
            fi
            sleep $SLEEP
          done
          echo "❌ Service did not reach HEALTHY/READY in time"
          exit 1