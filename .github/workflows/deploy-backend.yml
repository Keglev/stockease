name: Migrate and Deploy Backend

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  migrate-and-deploy:
    runs-on: ubuntu-latest
    env:
      # These should be configured as repository secrets
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect backend directory
        run: |
          # Detect whether mvnw is at repo root or inside a backend subfolder and set BACKEND_DIR
          if [ -f "$GITHUB_WORKSPACE/mvnw" ]; then
            echo "BACKEND_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          elif [ -f "$GITHUB_WORKSPACE/backend/mvnw" ]; then
            echo "BACKEND_DIR=$GITHUB_WORKSPACE/backend" >> $GITHUB_ENV
          else
            echo "Could not find mvnw in workspace." >&2
            exit 1
          fi

      - name: Make mvnw executable
        run: |
          chmod +x "$BACKEND_DIR/mvnw"

      - name: Build backend (skip Flyway in CI)
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          echo "Building backend JAR (Flyway will run at app startup on Koyeb with proper DB connection)"
          "$BACKEND_DIR/mvnw" -DskipTests package

      - name: Build & push Docker image
        run: |
          # Ensure repository owner is lowercased (GHCR requires lowercase repository names)
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_BASE=ghcr.io/${OWNER_LOWER}/stockease
          IMAGE_SHA=${IMAGE_BASE}:${{ github.sha }}
          IMAGE_LATEST=${IMAGE_BASE}:latest
          echo "Building and pushing images"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker build -f "$BACKEND_DIR/Dockerfile" -t "$IMAGE_SHA" -t "$IMAGE_LATEST" "$BACKEND_DIR"
          docker push "$IMAGE_SHA"
          docker push "$IMAGE_LATEST"
          echo "IMAGE=$IMAGE_SHA" >> $GITHUB_ENV

      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure image var is set
        run: |
          if [ -z "${IMAGE:-}" ]; then
            echo "IMAGE not set" >&2; exit 1
          fi

      - name: Deploy to Koyeb via API (no CLI)
        env:
          KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
          KOYEB_SERVICE_ID: ${{ secrets.KOYEB_SERVICE_ID }} # put this in repo secrets
          IMAGE: ${{ env.IMAGE }}
        run: |
          test -n "$IMAGE" || { echo "IMAGE not set"; exit 1; }
          curl -sS -X POST \
            -H "Authorization: Bearer $KOYEB_API_KEY" \
            -H "Content-Type: application/json" \
            "https://app.koyeb.com/v1/services/$KOYEB_SERVICE_ID/deploy" \
            -d "$(jq -n --arg img "$IMAGE" '{image:$img, strategy:"ROLLING"}')"
