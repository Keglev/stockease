name: Migrate and Deploy Backend

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  migrate-and-deploy:
    runs-on: ubuntu-latest
    env:
      # These should be configured as repository secrets
      NEON_JDBC_URL: ${{ secrets.NEON_JDBC_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect backend directory
        run: |
          # Detect whether mvnw is at repo root or inside a backend subfolder and set BACKEND_DIR
          if [ -f "$GITHUB_WORKSPACE/mvnw" ]; then
            echo "BACKEND_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
            echo "Detected backend dir: $GITHUB_WORKSPACE"
          elif [ -f "$GITHUB_WORKSPACE/backend/mvnw" ]; then
            echo "BACKEND_DIR=$GITHUB_WORKSPACE/backend" >> $GITHUB_ENV
            echo "Detected backend dir: $GITHUB_WORKSPACE/backend"
          else
            echo "Could not find mvnw in workspace. Listing workspace for debugging:" && ls -la "$GITHUB_WORKSPACE"
            exit 1
          fi

      - name: Run Flyway migrations (Docker)
        # Uses the Flyway Docker image to run migrations from the repo against Neon
        run: |
          echo "Running Flyway migrations against Neon (using BACKEND_DIR=$BACKEND_DIR)"
          docker run --rm -v "$BACKEND_DIR/src/main/resources/db/migration":/flyway/sql \
            flyway/flyway \
            -url="${{ env.NEON_JDBC_URL }}" \
            -user="${{ env.SPRING_DATASOURCE_USERNAME }}" -password="${{ env.SPRING_DATASOURCE_PASSWORD }}" \
            -locations=filesystem:/flyway/sql migrate

      - name: Debug backend workspace contents
        run: |
          echo "Listing contents of $GITHUB_WORKSPACE and $GITHUB_WORKSPACE/backend"
          ls -la "$GITHUB_WORKSPACE" || true
          echo "-- backend dir --"
          ls -la "$GITHUB_WORKSPACE/backend" || true

      - name: Make mvnw executable
        run: |
          echo "Making mvnw executable at $BACKEND_DIR/mvnw"
          chmod +x "$BACKEND_DIR/mvnw"

      - name: Build backend JAR
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          "$BACKEND_DIR/mvnw" -DskipTests package

      - name: Build & push Docker image
        run: |
          # Ensure repository owner is lowercased (GHCR requires lowercase repository names)
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${OWNER_LOWER}/stockease:${{ github.sha }}
          echo "Building Docker image: $IMAGE"
          # Build using the backend Dockerfile (use detected BACKEND_DIR)
          docker build -f "$BACKEND_DIR/Dockerfile" -t "$IMAGE" "$BACKEND_DIR"
          echo "Logging in to GHCR"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          echo "Pushing image to GHCR"
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Install Koyeb CLI (robust)
        shell: bash
        run: |
          set -euo pipefail

          # try official installer, with retries + curl retries
          for i in {1..5}; do
            echo "Attempt $i: installing Koyeb CLI via install.sh ..."
            if curl --retry 5 --retry-delay 3 --retry-all-errors -fsSL https://cli.koyeb.com/install.sh | sudo bash; then
              if command -v koyeb >/dev/null 2>&1; then
                echo "Koyeb CLI installed via script"
                koyeb version || true
                break
              fi
            fi
            echo "Install attempt $i failed; retrying in 5s..."
            sleep 5
          done

          if command -v koyeb >/dev/null 2>&1; then
            echo "koyeb is available"
          else
            echo "Falling back to static tarball install"
            KOYEB_VERSION="v4.4.0"
            curl -fsSL "https://github.com/koyeb/koyeb-cli/releases/download/${KOYEB_VERSION}/koyeb_linux_amd64.tar.gz" -o /tmp/koyeb.tgz
            sudo tar -C /usr/local/bin -xzf /tmp/koyeb.tgz koyeb
            chmod +x /usr/local/bin/koyeb
            koyeb version
          fi

      - name: Login to Koyeb
        env:
          KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
        run: |
          koyeb login --api-key "${KOYEB_API_KEY}"

      - name: Inject image into Koyeb manifest and deploy
        run: |
          # The workflow built and pushed an image into GHCR and set IMAGE in the environment
          echo "Preparing deployment manifest with image: $IMAGE"
          # Use mikefarah/yq (docker image) to set the image field in-place
          docker run --rm -v "$GITHUB_WORKSPACE":"$GITHUB_WORKSPACE" -w "$GITHUB_WORKSPACE" mikefarah/yq yq eval '.services[0].image = strenv(IMAGE)' -i "$BACKEND_DIR/koyeb.yaml"
          cat "$BACKEND_DIR/koyeb.yaml"
          koyeb deploy -f "$BACKEND_DIR/koyeb.yaml"
