name: Migrate and Deploy Backend

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  migrate-and-deploy:
    runs-on: ubuntu-latest
    env:
      # These should be configured as repository secrets
      NEON_JDBC_URL: ${{ secrets.NEON_JDBC_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect backend directory
        run: |
          # Detect whether mvnw is at repo root or inside a backend subfolder and set BACKEND_DIR
          if [ -f "$GITHUB_WORKSPACE/mvnw" ]; then
            echo "BACKEND_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
            echo "Detected backend dir: $GITHUB_WORKSPACE"
          elif [ -f "$GITHUB_WORKSPACE/backend/mvnw" ]; then
            echo "BACKEND_DIR=$GITHUB_WORKSPACE/backend" >> $GITHUB_ENV
            echo "Detected backend dir: $GITHUB_WORKSPACE/backend"
          else
            echo "Could not find mvnw in workspace. Listing workspace for debugging:" && ls -la "$GITHUB_WORKSPACE"
            exit 1
          fi

      - name: Run Flyway migrations (Docker)
        # Uses the Flyway Docker image to run migrations from the repo against Neon
        run: |
          echo "Running Flyway migrations against Neon (using BACKEND_DIR=$BACKEND_DIR)"
          docker run --rm -v "$BACKEND_DIR/src/main/resources/db/migration":/flyway/sql \
            flyway/flyway \
            -url="${{ env.NEON_JDBC_URL }}" \
            -user="${{ env.SPRING_DATASOURCE_USERNAME }}" -password="${{ env.SPRING_DATASOURCE_PASSWORD }}" \
            -locations=filesystem:/flyway/sql migrate

      - name: Make mvnw executable
        run: |
          echo "Making mvnw executable at $BACKEND_DIR/mvnw"
          chmod +x "$BACKEND_DIR/mvnw"

      - name: Build backend JAR
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          "$BACKEND_DIR/mvnw" -DskipTests package

      - name: Build & push Docker image
        run: |
          # Ensure repository owner is lowercased (GHCR requires lowercase repository names)
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_BASE=ghcr.io/${OWNER_LOWER}/stockease
          IMAGE_SHA=${IMAGE_BASE}:${{ github.sha }}
          IMAGE_LATEST=${IMAGE_BASE}:latest
          echo "Building Docker images: $IMAGE_SHA and $IMAGE_LATEST"
          echo "Logging in to GHCR"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          # Build and tag both SHA and latest
          docker build -f "$BACKEND_DIR/Dockerfile" -t "$IMAGE_SHA" -t "$IMAGE_LATEST" "$BACKEND_DIR"
          echo "Pushing images to GHCR"
          docker push "$IMAGE_SHA"
          docker push "$IMAGE_LATEST"
          echo "IMAGE=$IMAGE_SHA" >> $GITHUB_ENV

      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure image var is set
        run: |
          if [ -z "${IMAGE:-}" ]; then
            echo "IMAGE not set"; exit 1
          fi

      - name: Deploy to Koyeb via API (no CLI)
        env:
          KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
          KOYEB_SERVICE_ID: ${{ secrets.KOYEB_SERVICE_ID }}
          IMAGE: ${{ env.IMAGE }}
        run: |
          set -euo pipefail
          echo "Deploying service $KOYEB_SERVICE_ID with image $IMAGE"
          # Build minimal JSON payload: { image: "...", strategy: "ROLLING" }
          payload=$(jq -n --arg img "$IMAGE" '{image:$img, strategy:"ROLLING"}')
          curl -sS -X POST \
            -H "Authorization: Bearer $KOYEB_API_KEY" \
            -H "Content-Type: application/json" \
            "https://app.koyeb.com/v1/services/$KOYEB_SERVICE_ID/deploy" \
            -d "$payload" | jq -C '.'
