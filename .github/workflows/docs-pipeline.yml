################################################################################
# GitHub Actions Workflow: Documentation Generation & Deployment Pipeline
# 
# PHASE 3: Deployment Infrastructure - Automated Documentation Generation
# 
# Purpose:
# --------
# Automates the complete documentation lifecycle:
# 1. Extracts OpenAPI specification from running Spring Boot application
# 2. Generates interactive API documentation (Redoc HTML)
# 3. Converts all markdown documentation to HTML with table of contents
# 4. Deploys documentation to GitHub Pages (gh-pages branch)
# 5. Creates documentation source branch for version control of .md files
#
# Architecture:
# -----------
# Input: Source code + documentation changes in main branch
#   ↓
# Build & Extract: Compile app, extract OpenAPI spec from /v3/api-docs endpoint
#   ↓
# Generate: Convert spec to Redoc HTML, convert markdown files to HTML
#   ↓
# Deploy: Push generated artifacts to gh-pages branch via peaceiris action
#   ↓
# Serve: GitHub Pages automatically serves content at keglev.github.io/stockease/
#
# Triggers:
# --------
# - Push to main branch with changes in backend/src/main/**, backend/docs/**, pom.xml
# - Manual trigger via GitHub Actions UI (workflow_dispatch)
#
# Outputs:
# -------
# - gh-pages branch: Generated HTML documentation for public consumption
# - docs-source branch: Source markdown files for documentation version control
# - GitHub Pages: Public documentation URL (https://keglev.github.io/stockease/)
#
# Dependencies:
# ------------
# - Java 17 (for Spring Boot compilation)
# - Maven 3.9.x (via cache)
# - Node.js (for redoc-cli, pandoc)
# - SpringDoc OpenAPI 2.4.0 (auto-exposes /v3/api-docs endpoint)
#
# Security:
# --------
# - Uses GITHUB_TOKEN (automatic, scoped to this workflow only)
# - No secrets required
# - Generated docs are public (by design - documentation should be public)
#
# Performance:
# -----------
# - Maven cache: Speeds up dependency resolution
# - Ubuntu latest: Ensures up-to-date tools
# - Total execution time: ~5-8 minutes
#
# Failure Handling:
# ----------------
# If any step fails, the workflow stops (fail-fast behavior)
# Check GitHub Actions tab for detailed error messages
# Common failures:
#   - Pandoc not installed: Handled by apt-get in workflow
#   - App startup timeout: Increase sleep duration if needed
#   - Git authentication: Uses GITHUB_TOKEN automatically
#
# Author: Team StockEase
# Version: 1.0
# Last Updated: 2025-10-31
################################################################################

name: Docs Pipeline

on:
  push:
    branches: [ main ]
    paths: 
      # Trigger on backend source code changes (may include endpoint documentation)
      - 'backend/src/main/**'
      # Trigger on documentation changes
      - 'backend/docs/**'
      # Trigger on dependency changes (may affect OpenAPI generation)
      - 'backend/pom.xml'
      # Trigger on workflow file changes (for testing/updates)
      - '.github/workflows/docs-pipeline.yml'
  # Allow manual trigger from GitHub Actions UI for testing/emergency deployments
  workflow_dispatch:

jobs:
  build-docs:
    # Run on ubuntu-latest to ensure all tools (pandoc, Node.js) available
    # Standard GitHub-provided runner with no additional setup needed
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history needed for creating orphan branches

      # Phase 1: Setup Build Environment
      # Install Java 17 matching the project's source level configuration
      # Cache Maven dependencies to speed up subsequent workflow runs (~2min faster)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven  # Cache ~/.m2/repository for faster builds

      # Phase 2: Build Spring Boot Application
      # Compile the application without running tests (tests verified in separate workflow)
      # Output: backend/target/stockease-0.0.1-SNAPSHOT.jar
      # Failure impact: If build fails, OpenAPI extraction cannot proceed
      - name: Build Spring Boot app
        working-directory: backend
        run: mvn clean package -q -DskipTests

      # Phase 3: Extract OpenAPI Specification
      # 
      # Why this step matters:
      # - OpenAPI spec is the machine-readable API contract
      # - Automatically generated by SpringDoc at /v3/api-docs endpoint
      # - Redoc uses this spec to generate interactive API documentation
      #
      # Execution flow:
      # 1. Create target/docs directory for outputs
      # 2. Start Spring Boot app in background (Tomcat server startup)
      # 3. Wait 10 seconds for app to fully initialize and enable Spring beans
      # 4. Call /v3/api-docs endpoint (provided by org.springdoc:springdoc-openapi-starter-webmvc-ui)
      # 5. Save JSON response to backend/target/docs/openapi.json
      # 6. Kill the process to free resources
      #
      # Failure scenarios:
      # - App fails to start: Increase sleep duration (line "sleep 10")
      # - Endpoint returns 404: Verify SpringDoc dependency in pom.xml
      # - curl fails: Network connectivity issue in runner environment
      - name: Extract OpenAPI spec
        working-directory: backend
        run: |
          mkdir -p target/docs
          # Start app in background, wait for startup, extract spec, stop app
          java -jar target/stockease-0.0.1-SNAPSHOT.jar &
          APP_PID=$!
          sleep 10
          curl -s http://localhost:8080/v3/api-docs > target/docs/openapi.json
          kill $APP_PID 2>/dev/null || true
          echo "OpenAPI spec extracted"
      
      # Phase 4: Generate Interactive API Documentation (Redoc)
      # 
      # Purpose: Convert machine-readable OpenAPI JSON into human-friendly interactive HTML
      # 
      # What Redoc provides:
      # - Single-page interactive API reference (no external dependencies)
      # - Full-text search across all endpoints
      # - Request/response schema visualization
      # - Authentication and security requirements documentation
      # - Code examples for different programming languages
      # - Mobile-responsive design
      #
      # Output: backend/target/docs/index.html (~2-3 MB single-page application)
      # 
      # Customization options:
      # - --title: Sets documentation title
      # - --logo: Adds custom logo
      # - --favicon: Adds custom favicon
      # See: https://github.com/Redocly/redoc/blob/main/cli/README.md
      - name: Generate Redoc HTML
        run: |
          npm install -g redoc-cli
          cd backend/target/docs
          redoc-cli build openapi.json -o index.html
          echo "Redoc HTML generated"
      
      # Phase 5: Convert Markdown Documentation to HTML
      #
      # Purpose: Transform all .md source files into styled HTML with table of contents
      # Enables consistent documentation styling and enables GitHub Pages serving
      #
      # Processing:
      # - Find all .md files recursively in backend/docs/
      # - Use pandoc to convert Markdown → HTML
      # - Generate table of contents automatically from headers (--toc flag)
      # - Standalone HTML with embedded CSS (--standalone flag)
      # - Preserve relative paths in output directory structure
      #
      # Output structure:
      #   backend/target/docs/generated/
      #   ├── index.html (from backend/docs/index.md)
      #   ├── JAVADOC-GUIDE.html
      #   ├── architecture/
      #   │   ├── backend.html
      #   │   ├── frontend.html
      #   │   └── ...
      #   └── ...
      #
      # Note: First install pandoc (via apt-get on Ubuntu) since it's not in npm
      - name: Convert Markdown to HTML
        run: |
          # Install pandoc from Ubuntu package manager (not npm)
          sudo apt-get update && sudo apt-get install -y pandoc
          
          mkdir -p backend/target/docs/generated
          
          # Convert all .md files recursively
          find backend/docs -name "*.md" -type f | while read md_file; do
            html_file="backend/target/docs/generated/$(basename "$md_file" .md).html"
            # pandoc options:
            # -f markdown: input format
            # -t html: output format
            # --toc: generate table of contents
            # -s: standalone HTML (includes html/body tags and CSS)
            pandoc "$md_file" -f markdown -t html --toc -s -o "$html_file"
          done
          echo "Markdown files converted to HTML"
      
      # Phase 6: Generate Sitemap for Search Engine Optimization
      # Purpose: Help search engines discover and index documentation
      # Output: backend/target/docs/sitemap.xml (standard XML format)
      - name: Generate sitemap
        run: |
          cat > backend/target/docs/sitemap.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://keglev.github.io/stockease/api/</loc>
              <lastmod>$(date +%Y-%m-%d)</lastmod>
              <priority>1.0</priority>
            </url>
          </urlset>
          EOF
          echo "Sitemap generated"
      
      # Phase 7: Deploy Generated Documentation to GitHub Pages
      #
      # Purpose: Publish generated documentation for public access
      # 
      # How peaceiris/actions-gh-pages works:
      # 1. Creates/updates gh-pages branch in repository
      # 2. Commits all files from publish_dir to gh-pages branch
      # 3. Pushes to GitHub (GitHub Pages automatically detects changes)
      # 4. GitHub Pages builds and serves content within ~30 seconds
      #
      # Deployment configuration:
      # - github_token: Auto-provided by GitHub Actions (scoped to this repo)
      # - publish_dir: Source of files to deploy (backend/target/docs)
      # - cname: Optional custom domain configuration (commented out by default)
      #
      # Result:
      # - Content available at: https://keglev.github.io/stockease/
      # - All files in gh-pages branch:
      #   ├── index.html (Redoc API docs)
      #   ├── openapi.json
      #   ├── sitemap.xml
      #   └── generated/ (converted markdown HTML)
      #
      # Security implications:
      # - Documentation is PUBLIC (by design, API docs should be discoverable)
      # - GITHUB_TOKEN has minimal permissions (write to this repo only)
      # - No sensitive information should be in documentation
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./backend/target/docs
          # Optional custom domain (uncomment and configure if needed)
          # cname: stockease-docs.example.com
      
      # Phase 8: Create Documentation Source Branch
      #
      # Purpose: Maintain version-controlled copy of documentation source files
      # Rationale: Separate source .md files from generated artifacts for clarity
      #
      # Implementation:
      # - git checkout --orphan: Creates branch with clean history (no parent commits)
      # - Rationale: gh-pages branch contains many binary artifacts, docs-source stays lean
      # - git rm -rf .: Clears all files from current working directory
      # - git checkout HEAD --: Restores only specified files from main branch
      # - Force push: Ensures clean branch even if docs-source exists
      #
      # Result: docs-source branch contains ONLY:
      # - backend/docs/*.md (all documentation sources)
      # - backend/src/main/docs/api.md (API-specific docs)
      # - README.md (project overview)
      # 
      # NOT included:
      # - Generated .html files
      # - Compiled .class files
      # - JAR artifacts
      # - Node modules
      #
      # Use case: For documentation team to track source changes over time
      - name: Create docs-source branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create orphan docs-source branch (new history, no parent commits)
          git checkout --orphan docs-source
          git rm -rf .
          
          # Copy ONLY source documentation files (not generated HTML)
          git checkout HEAD -- backend/docs backend/src/main/docs README.md
          git add -A
          
          git commit -m "docs: Documentation sources - Phase 3 (Item 3.13)"
          git push -u origin docs-source --force

